{"version":3,"sources":["Components/cell.jsx","Components/row.jsx","Components/board.jsx","App.js","reportWebVitals.js","index.js"],"names":["count","counter","Cell","props","displayMode","className","onClick","handleClick","row","col","onContextMenu","e","rtClick","preventDefault","numMines","Row","array","disp","display","i","push","style","Board","j","findNeighbors","x","y","max","randomNumber","randArr","length","Math","floor","random","pop","App","bind","winThing","isMine","isClicked","isRtClicked","numNearMine","dummy","thing","mode","stateArr","tempArr","JSON","parse","stringify","mines","k","val1","val2","q","values","t","a","b","state","cells","minesTagged","totalMines","winState","prevProps","prevState","this","restart","setState","youLost","num","victoryConditions","value","window","confirm","parseInt","number","console","log","name","onChange","event","handleChange","target","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62d6ceb3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cells.css';\r\n\r\n\r\n\r\nlet count = 100;\r\nfunction counter() {\r\n  count = count + 1;\r\n  return count\r\n}\r\n\r\nexport default function Cell(props) {\r\n\r\n  if (props.displayMode === 'initial') {\r\n    return (\r\n      <button \r\n        key = {counter()}\r\n          className = {props.displayMode}\r\n          onClick = {() => props.handleClick(props.row, props.col)} \r\n          onContextMenu = {(e) => \r\n            {props.rtClick(props.row, props.col); \r\n            e.preventDefault()}} >\r\n      </button> )\r\n    }\r\n\r\n    else if (props.displayMode === 'clicked') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n          className = {props.displayMode + \" color\" + props.numMines}\r\n          onContextMenu = {(e) => e.preventDefault()}>\r\n            {props.numMines}\r\n        </button>   )\r\n    } \r\n\r\n    else if (props.displayMode === 'empty') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n          className = {props.displayMode}\r\n          onClick = {() => props.handleClick(props.row, props.col)}\r\n          onContextMenu = {(e) =>  e.preventDefault()}>\r\n        </button>  )\r\n    }\r\n\r\n    else if (props.displayMode === 'rtClicked') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n          className = {props.displayMode}\r\n          onClick = {() => props.handleClick(props.row, props.col)} \r\n          onContextMenu = {(e) => \r\n            {props.rtClick(props.row, props.col); \r\n            e.preventDefault()}} >\r\n                        \r\n        </button>  )\r\n    }\r\n\r\n    else if (props.displayMode === 'explosion') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n            className = {props.displayMode} \r\n            onContextMenu = {(e) => \r\n              e.preventDefault()} >\r\n                \r\n        </button>  )\r\n    }\r\n\r\n    else if (props.displayMode === 'mine') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n            className = {props.displayMode}\r\n            onContextMenu = {(e) =>  \r\n              e.preventDefault()}>\r\n        </button>  )\r\n    }\r\n    \r\n    else if (props.displayMode === 'gameover') {\r\n      return (\r\n        <button \r\n          key = {counter()}\r\n            className = {props.displayMode} \r\n            onContextMenu = {(e) => e.preventDefault()}>\r\n        </button> )\r\n    }\r\n  }   //end of function Cell\r\n\r\n","import React from 'react';\r\nimport Cell from'./cell';\r\n\r\n\r\nexport default function Row(props) {\r\n    let array = []\r\n    let disp = {display: 'flex'}\r\n    for(let i = 0; i < 10; i++) {\r\n      array.push(<Cell\r\n                  key = {i}\r\n                  style = {disp}\r\n                  row = {props.row} \r\n                  col = {i} \r\n                  handleClick = {props.handleClick} \r\n                  rtClick = {props.rtClick}\r\n                  displayMode = {props.displayMode[i]}\r\n                  numMines = {props.numMines[i]} />  )\r\n    }\r\n    \r\n    return (\r\n      <div style = {disp}>\r\n        {array}\r\n      </div> )\r\n  }\r\n\r\n  ","import React from 'react';\r\nimport Row from './row';\r\n\r\n\r\nexport default function Board(props) {\r\n  let array = []\r\n  for(let j = 0; j < 10; j++) {\r\n      array.push(<Row key = {j}\r\n                    row = {j} \r\n                    handleClick = {props.handleClick} \r\n                    rtClick = {props.rtClick}\r\n                    displayMode = {props.displayMode[j]}\r\n                    numMines = {props.numMines[j]} />  )\r\n    }\r\n    return (\r\n      <div>\r\n        {array}\r\n      </div>  )\r\n}\r\n\r\n//  ","import React, {Component} from 'react';\nimport './App.css';\nimport Board from './Components/board';\n\n\n\n//max is (# of rows/columns - 1), x=row, y=col\nfunction findNeighbors(x, y, max) {\n  if (x === 0 && y === 0) {\n    return [[0, 1], [1, 0], [1, 1]];\n  }\n  else if (x === max && y === 0) {\n    return [[x-1, 0], [x-1, y+1], [x, y+1]];\n  }\n  else if (x === 0 && y === max) {\n    return [[0, y-1], [x+1, y-1], [x+1, y]];\n  }\n  else if (x === max && y === max) {\n    return [[x-1, y], [x-1, y-1], [x, y-1]];\n  }\n  else if (x === 0) {\n    return [[0, y-1], [0, y+1], [1, y-1], [1, y], [1, y+1]];\n  }\n  else if (y === 0) {\n    return [[x+1, 0], [x-1, 0], [x-1, 1], [x, 1], [x+1, 1]];\n  }\n  else if (x === max) {\n    return [[x, y-1], [x, y+1], [x-1, y-1], [x-1, y], [x-1, y+1]];\n  }\n  else if (y === max) {\n    return [[x-1, y], [x+1, y], [x-1, y-1], [x, y-1], [x+1, y-1]];\n  }\n  else {\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]];\n  }\n}\n\nfunction randomNumber(max) {\n  let randArr = []\n  while(randArr.length < max) {\n    const x = Math.floor(Math.random() * 10) ;\n    const y = Math.floor(Math.random() * 10) ;\n    randArr.push([x, y])\n    for(let i = 0; i <= (randArr.length - 2); i++) {\n      if(randArr[i][0] === x && randArr[i][1] === y)\n        {randArr.pop()}\n    }\n  }\n  return randArr\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n    this.rtClick = this.rtClick.bind(this)\n    \n    const winThing = \n          {isMine: false, \n            isClicked: false, \n             isRtClicked: false}\n\n    const numNearMine = []\n    const dummy = []\n    const thing = []\n    const mode = []\n    const stateArr = []\n    const tempArr = []\n\n    for(let i = 0; i < 10; i++) {\n      tempArr.push(JSON.parse(JSON.stringify(winThing)));\n      thing.push(JSON.parse(JSON.stringify('initial')));\n      dummy.push(0)\n    }\n\n    for(let j = 0; j < 10; j++) {\n      stateArr[j] = JSON.parse(JSON.stringify(tempArr));\n      mode[j] = JSON.parse(JSON.stringify(thing));\n      numNearMine[j] = JSON.parse(JSON.stringify(dummy))\n    }\n    \n    const mines = randomNumber(10)\n    for (let k = 0; k < mines.length; k++) {\n      const val1 = mines[k][0];\n      const val2 = mines[k][1];\n      stateArr[val1][val2].isMine = true\n    }\n    \n    for (let q = 0; q < mines.length; q++) {\n      const val1 = mines[q][0];\n      const val2 = mines[q][1];\n      const values = findNeighbors(val1, val2, 9)\n      for (let t = 0; t < values.length; t++) {\n        const a = values[t][0];\n        const b = values[t][1];\n        if (stateArr[a][b].isMine === false) {\n          numNearMine[a][b] += 1\n        }\n      }\n    }\n\n    this.state = {cells: stateArr, \n                  mode: mode, \n                  numMines: numNearMine, \n                  minesTagged: 0,\n                  totalMines: 10,\n                  winState: 0}\n  }   //end of constructor\n  \n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.totalMines !== this.state.totalMines) {\n      this.restart(this.state.totalMines)}\n  }\n\n  handleClick(row, col) {\n    if (this.state.cells[row][col].isRtClicked === true)\n      {return}\n      // eslint-disable-next-line\n    else {this.state.cells[row][col].isClicked = true}\n\n    if (this.state.cells[row][col].isClicked === true \n      && this.state.cells[row][col].isMine === true) {\n        // eslint-disable-next-line\n      this.state.mode[row][col] = 'explosion'\n      this.setState({cells: this.state.cells, mode: this.state.mode})\n      this.youLost()\n    }\n    else if (this.state.cells[row][col].isMine === false \n      && this.state.numMines[row][col] === 0) {\n        // eslint-disable-next-line\n        this.state.mode[row][col] = 'empty'\n    }\n    // eslint-disable-next-line\n    else {this.state.mode[row][col] = 'clicked'}\n\n    this.setState({cells: this.state.cells, mode: this.state.mode})\n    \n    if (this.state.mode[row][col] === 'empty') {\n      const values = findNeighbors(row, col, 9)\n      for (let num = 0; num < values.length; num++) {\n        const val1 = values[num][0]\n        const val2 = values[num][1]\n        // eslint-disable-next-line\n        this.state.cells[val1][val2].isClicked = true\n        if(this.state.numMines[val1][val2] === 0) {\n          // eslint-disable-next-line\n          this.state.mode[val1][val2] = 'empty'\n        }\n        // eslint-disable-next-line\n        else {this.state.mode[val1][val2] = 'clicked'}\n      }\n    }\n\n    this.setState({cells: this.state.cells, mode: this.state.mode})\n    if (this.victoryConditions() === true) {\n      this.setState({winState: 1})\n    } \n  }   //end of handleClick\n\n  rtClick(row, col) {\n    if (this.state.cells[row][col].isClicked === true) \n      {return}\n    else {\n      // eslint-disable-next-line\n      this.state.cells[row][col].isRtClicked = !this.state.cells[row][col].isRtClicked\n      }\n\n    if (this.state.cells[row][col].isRtClicked === true) {\n      // eslint-disable-next-line\n      this.state.mode[row][col] = 'rtClicked'\n      // eslint-disable-next-line\n      this.state.minesTagged = this.state.minesTagged + 1\n    }\n    else {\n      // eslint-disable-next-line\n      this.state.mode[row][col] = 'initial'\n      // eslint-disable-next-line\n      this.state.minesTagged = this.state.minesTagged - 1\n    }\n\n    this.setState({cells: this.state.cells, \n                    mode: this.state.mode, \n                    minesTagged: this.state.minesTagged})\n  }   //end of rtClick\n\n  handleChange(value) {\n    const gameReset = window.confirm(\"This will reset the current game. Are you sure?\")\n    if(!gameReset) {return}\n\n    this.setState({totalMines: parseInt(value)})\n  }\n\n  victoryConditions() {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        if(this.state.cells[i][j].isMine === false \n        && this.state.cells[i][j].isClicked ===false) \n          {return false}\n      }\n    } \n    return true\n  }   //end of victory conditions\n\n  youLost() {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        if(this.state.cells[i][j].isMine === true \n          && this.state.cells[i][j].isClicked === false) {\n            // eslint-disable-next-line\n            this.state.mode[i][j] = 'mine'\n          }\n        else if (this.state.mode[i][j] === 'initial') {\n          // eslint-disable-next-line\n          this.state.mode[i][j] = 'gameover'\n          }\n      }\n    }\n    this.setState({cells: this.state.cells, mode: this.state.mode, winState: 2})\n  }   //end of youLost\n\n  restart(number = 10) {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        // eslint-disable-next-line\n        this.state.cells[i][j].isMine = false \n        // eslint-disable-next-line\n        this.state.cells[i][j].isClicked = false\n        // eslint-disable-next-line\n        this.state.cells[i][j].isRtClicked = false\n        // eslint-disable-next-line\n        this.state.mode[i][j] = 'initial'\n        // eslint-disable-next-line\n        this.state.numMines[i][j] = 0\n      }\n    }\n\n    this.setState({\n      cells: this.state.cells,\n      mode: this.state.mode,\n      numMines: this.state.numMines, \n      minesTagged: 0,\n      totalMines: number,\n      winState: 0\n    })\n\n    console.log(this.state)\n    const mines = randomNumber(parseInt(this.state.totalMines))\n    for (let k = 0; k < mines.length; k++) {\n      const val1 = mines[k][0]\n      const val2 = mines[k][1]\n      // eslint-disable-next-line\n      this.state.cells[val1][val2].isMine = true\n    }\n    \n    for (let q = 0; q < mines.length; q++) {\n      const val1 = mines[q][0];\n      const val2 = mines[q][1];\n      const values = findNeighbors(val1, val2, 9)\n      for (let t = 0; t < values.length; t++) {\n        const a = values[t][0];\n        const b = values[t][1];\n        if (this.state.cells[a][b].isMine === false) {\n          // eslint-disable-next-line\n          this.state.numMines[a][b] += 1\n        }\n      }\n    }\n    this.setState({\n      cells: this.state.cells,\n      mode: this.state.mode,\n      numMines: this.state.numMines\n    })\n  }   //end of restart method\n\n  render() {\n    return(\n      <div className = \"gameContainer\">\n        <div className = \"gameHeader\">\n          <div className = \"scoreCount\">Mines\n            <div className = \"numDisplay\">{this.state.totalMines}</div>\n          </div>\n          <div className = \"scoreCount\">Marked\n            <div className = \"numDisplay\">{this.state.minesTagged}</div>\n          </div>\n        </div>\n        <Board handleClick = {this.handleClick} \n            rtClick = {this.rtClick}\n            displayMode = {this.state.mode}\n            numMines = {this.state.numMines} />\n        <div className = \"menu\">\n          <button className = \"restart\" onClick = {() => this.restart(this.state.totalMines)}>Restart</button>\n          <figure>\n            <figcaption>Difficulty:</figcaption>\n            <select name = \"difficulty\" \n                    value = {this.state.value}\n                    onChange = {(event) => this.handleChange(event.target.value)}>\n              <option value = '10'>Easy</option>\n              <option value = '15'>Not Easy</option>\n              <option value = '20'>Impossible</option>\n            </select>\n          </figure>\n        </div>\n        <div className = \"message\">\n          {this.state.winState > 0 ? this.state.winState === 1 ? 'You Win': 'You Lose' : ''}\n        </div>\n      </div>  \n    )}\n}  //end of game component \n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}